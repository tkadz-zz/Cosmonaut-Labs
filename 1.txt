<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Paginated Table</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .scrolldown {
      width: 100%;
      border-collapse: collapse;
    }

    th, td {
      padding: 10px;
      text-align: center;
      border: 1px solid #ddd;
    }

    tbody tr:nth-child(even) {
      background-color: #f2f2f2;
    }

    .pagination-container {
      text-align: center;
      margin-top: 20px;
    }

    .pagination {
      display: inline-block;
    }

    .pagination li {
      display: inline;
      margin: 0 5px;
    }

    .pagination a {
      padding: 8px 12px;
      border: 1px solid #ccc;
      text-decoration: none;
      color: #007bff;
    }

    .pagination a:hover {
      background-color: #f1f1f1;
    }

    .pagination .disabled a {
      color: #ccc;
      pointer-events: none;
    }
  </style>
</head>
<body>

<div class="container my-5">
  <h2>Paginated Table</h2>

  <!-- Paginated Table -->
  <table class="scrolldown">
    <thead>
      <tr>
        <th>#</th>
        <th>Name</th>
        <th>Age</th>
        <th>Care Status</th>
        <th>Next Appointment</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody id="table-body">
      <!-- Rows will be dynamically added here -->
    </tbody>
  </table>

  <!-- Pagination Controls -->
  <div id="pagination-container" class="pagination-container">
    <ul class="pagination">
      <!-- Pagination links will be dynamically added here -->
    </ul>
  </div>
</div>

<script>
  // Provided dataset
  const serviceUsers = [
    { id: 1, name: "John Doe", age: 78, careStatus: "Active", nextAppointment: "2024-11-18T10:00:00Z" },
    { id: 2, name: "Jane Smith", age: 84, careStatus: "Inactive", nextAppointment: "2024-11-20T14:30:00Z" },
    { id: 3, name: "Mary Johnson", age: 92, careStatus: "Active", nextAppointment: "2024-11-19T09:00:00Z" },
    { id: 4, name: "Peter Brown", age: 75, careStatus: "On Hold", nextAppointment: "2024-11-22T11:00:00Z" },
    { id: 5, name: "Susan Davis", age: 88, careStatus: "Active", nextAppointment: "2024-11-23T08:30:00Z" },
    { id: 6, name: "James Wilson", age: 82, careStatus: "Active", nextAppointment: "2024-11-24T15:00:00Z" },
    { id: 7, name: "Patricia Taylor", age: 79, careStatus: "Inactive", nextAppointment: "2024-11-21T10:30:00Z" },
    { id: 8, name: "Michael Thomas", age: 85, careStatus: "Active", nextAppointment: "2024-11-25T09:30:00Z" },
    { id: 9, name: "Linda White", age: 81, careStatus: "Active", nextAppointment: "2024-11-26T13:00:00Z" },
    { id: 10, name: "Barbara Harris", age: 90, careStatus: "On Hold", nextAppointment: "2024-11-27T12:00:00Z" },
    { id: 11, name: "Steven Martin", age: 77, careStatus: "Active", nextAppointment: "2024-11-18T11:30:00Z" },
    { id: 12, name: "Elizabeth Moore", age: 86, careStatus: "Active", nextAppointment: "2024-11-20T16:00:00Z" },
    { id: 13, name: "Charles Clark", age: 89, careStatus: "Inactive", nextAppointment: "2024-11-19T14:00:00Z" },
    { id: 14, name: "Dorothy Lewis", age: 87, careStatus: "Active", nextAppointment: "2024-11-21T15:30:00Z" },
    { id: 15, name: "Christopher Walker", age: 83, careStatus: "Active", nextAppointment: "2024-11-23T11:15:00Z" },
    { id: 16, name: "Nancy Hall", age: 91, careStatus: "Inactive", nextAppointment: "2024-11-24T10:45:00Z" },
    { id: 17, name: "Daniel Young", age: 76, careStatus: "On Hold", nextAppointment: "2024-11-25T12:30:00Z" },
    { id: 18, name: "Karen King", age: 80, careStatus: "Active", nextAppointment: "2024-11-26T09:15:00Z" },
    { id: 19, name: "Joseph Wright", age: 84, careStatus: "Active", nextAppointment: "2024-11-27T10:00:00Z" },
    { id: 20, name: "Betty Lopez", age: 78, careStatus: "Inactive", nextAppointment: "2024-11-28T13:45:00Z" }
  ];

  const pageSize = 5; // Number of rows per page
  let currentPage = 1; // Start with page 1
  const totalPages = Math.ceil(serviceUsers.length / pageSize); // Total number of pages

  // Function to render table rows
  function renderRows(page) {
    const tbody = document.getElementById('table-body');
    tbody.innerHTML = ''; // Clear existing rows

    const startIndex = (page - 1) * pageSize;
    const endIndex = Math.min(page * pageSize, serviceUsers.length);

    const usersToDisplay = serviceUsers.slice(startIndex, endIndex);

    usersToDisplay.forEach(user => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${user.id}</td>
        <td>${user.name}</td>
        <td>${user.age}</td>
        <td>
          <span class="${user.careStatus === 'Active' ? 'text-success' : user.careStatus === 'Inactive' ? 'text-danger' : 'text-warning'}">
            ${user.careStatus}
          </span>
        </td>
        <td>${new Date(user.nextAppointment).toLocaleString()}</td>
        <td>
          <button class="btn btn-sm btn-primary">Edit</button>
          <button class="btn btn-sm btn-success">View</button>
        </td>
      `;
      tbody.appendChild(row);
    });
  }

  // Function to render pagination
  function renderPagination() {
    const paginationContainer = document.getElementById('pagination-container').querySelector('ul');
    paginationContainer.innerHTML = ''; // Clear existing pagination links

    const prevDisabled = currentPage === 1 ? 'disabled' : '';
    const nextDisabled = currentPage === totalPages ? 'disabled' : '';

    const prevPage = document.createElement('li');
    prevPage.classList.add('page-item', prevDisabled);
    prevPage.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage - 1})">Previous</a>`;
    paginationContainer.appendChild(prevPage);

    for (let i = 1; i <= totalPages; i++) {
      const pageItem = document.createElement('li');
      pageItem.classList.add('page-item', i === currentPage ? 'active' : '');
      pageItem.innerHTML = `<a class="page-link" href="#" onclick="changePage(${i})">${i}</a>`;
      paginationContainer.appendChild(pageItem);
    }

    const nextPage = document.createElement('li');
    nextPage.classList.add('page-item', nextDisabled);
    nextPage.innerHTML = `<a class="page-link" href="#" onclick="changePage(${currentPage + 1})">Next</a>`;
    paginationContainer.appendChild(nextPage);
  }

  // Change page
  function changePage(page) {
    if (page < 1 || page > totalPages) return; // Prevent out-of-bound pages
    currentPage = page;
    renderRows(currentPage);
    renderPagination();
  }

  // Initial render
  renderRows(currentPage);
  renderPagination();
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
